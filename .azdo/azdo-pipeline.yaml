trigger:
- main

pool:
  vmImage: ubuntu-18.04

variables:
- group: CloudRun
- group: ValidationCI
- group: CloudRunCICD

resources:
  repositories:
  - repository: Infra
    type: github
    name: umed-jp/infra
    endpoint: umed-jp

stages:
- stage: CI
  jobs:
  - template: templates/ci-jobs.yaml
    parameters:
      publish: or(in(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['sandbox'],  'true'))
      containerRegistry: $(containerRegistry)
      repository: $(repository)
  - job: CleanUp
    condition: false # Disabled cleanup for FHIR for now
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '1.0.3'
      displayName: 'Install Terraform'
    - checkout: Infra
    - task: TerraformTaskV2@2
      displayName: 'Terraform Init'
      inputs:
        provider: 'gcp'
        command: 'init'
        backendServiceGCP: 'gcp-terraform-sp'
        backendGCPBucketName: 'terraform-kitsune-state'
        backendGCPPrefix: dev
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev/kitsune'
    - task: TerraformTaskV2@2
      displayName: 'Terraform destroy dataset'
      inputs:
        provider: 'gcp'
        command: 'destroy'
        commandOptions: '-target module.fhir_store.google_healthcare_dataset.dataset -target module.fhir_store.google_healthcare_fhir_store.fhir_store'
        environmentServiceNameGCP: 'gcp-terraform-sp'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev/kitsune'
    - task: TerraformTaskV2@2
      displayName: 'Terraform Apply'
      inputs:
        provider: 'gcp'
        command: 'apply'
        environmentServiceNameGCP: 'gcp-terraform-sp'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev/kitsune'
- stage: CD_DEV
  dependsOn: CI
  displayName: CD for Dev
  condition: or(in(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['sandbox'],  'true'))
  jobs:
  - template: templates/cd-jobs.yaml
    parameters:
      env: dev
      build_id: $(Build.BuildId)
      project_id: $(project-dev)
      serviceAccounts: $(deployer-sp)
- stage: CD_STG
  dependsOn: CD_DEV
  displayName: CD for Stage
  condition: or(in(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['sandbox'],  'true'))
  jobs:
  - template: templates/cd-jobs.yaml
    parameters:
      env: stg
      build_id: $(Build.BuildId)
      project_id: $(project-stg)
      serviceAccounts: $(deployer-sp)
- stage: CD_PROD
  dependsOn: CD_STG
  displayName: CD for Prod
  condition: or(in(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['sandbox'],  'true'))
  jobs:
  - template: templates/cd-jobs.yaml
    parameters:
      env: prod
      build_id: $(Build.BuildId)
      project_id: $(project-prod)
      serviceAccounts: $(deployer-sp)
