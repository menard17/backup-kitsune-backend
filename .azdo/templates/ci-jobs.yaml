parameters:
- name: publish
  default: false
- name: containerRegistry
- name: repository


jobs:
- job: Validation
  variables:
  - group: ValidationCI
  steps:
  - script: |
      sudo mkdir /secrets
      sudo touch /secrets/stripe_key
      sudo chmod 777 /secrets/stripe_key
      sudo echo "key" > /secrets/stripe_key
    displayName: 'Create secrets file'
  - task: DownloadSecureFile@1
    name: googleApplicationCredentials
    displayName: 'Download GOOGLE_APPLICATION_CREDENTIALS'
    inputs:
      secureFile: 'kitsune-dev-service-account.json'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.9
    displayName: Install Python
  - script: |
      python -m pip install -U pip
      pip install poetry
      poetry install
    displayName: Install software
  - script: |
      poetry run flake8 src/**/*.py --max-line-length=131
    displayName: flake8
  - script: |
      export PYTHONPATH=src/
      export FCM_TOKEN=$(FCM_TOKEN)
      poetry run pytest --reruns 3 --reruns-delay 1 . --junitxml=junit/test-results.xml --cov=. --cov-report=xml
    displayName: pytest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: $(googleApplicationCredentials.secureFilePath)
  - script: |
      sudo rm /secrets/stripe_key
    displayName: 'Delete a secret'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results'
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
- job: Docker
  dependsOn: CleanUp
  steps:
  - task: Docker@2
    displayName: 'Login to Container Registry'
    inputs:
      command: login
      containerRegistry: ${{ parameters.containerRegistry }}
  - task: Docker@2
    displayName: 'Docker Build'
    inputs:
      containerRegistry: ${{ parameters.containerRegistry }}
      repository: ${{ parameters.repository }}
      command: 'build'
      Dockerfile: 'docker/Dockerfile'
      buildContext: $(Build.Repository.LocalPath)
      tags: |
        $(Build.BuildId)
        latest
      arguments: '--target production'
  - task: Docker@2
    condition: ${{ parameters.publish }}
    displayName: 'Docker Push'
    inputs:
      containerRegistry: ${{ parameters.containerRegistry }}
      repository: ${{ parameters.repository }}
      buildContext: $(Build.Repository.LocalPath)
      command: 'push'
      tags: |
        $(Build.BuildId)
        latest
